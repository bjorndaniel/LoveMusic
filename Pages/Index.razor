@page "/"
@inject IConfiguration Config
@inject HttpClient Http
@inject NavigationManager Navigation
@inject Blazored.LocalStorage.ILocalStorageService LocalStore

<main role="main" class="inner cover">
    <h1 class="cover-heading">Bringing your last.fm lists to Spotify.</h1>
    <p class="lead">Love music can fetch playlists for a last.fm user and create Spotify playlists for them.</p>
    <p class="lead">
         All that is required is that you give permission for Love music to integrate with Spotify.
    </p>
    <p class="lead">
        <button  class="btn btn-lg btn-success" @onclick="Connect">Connect with Spotify</button>
    </p>
</main>
@code{
    private string Token { get; set; }
    private SpotifyUser User { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var uri = Navigation.ToAbsoluteUri(Navigation.Uri);
        var query = uri.ToString().Split("#").LastOrDefault();
        if (QueryHelpers.ParseQuery(query).TryGetValue("access_token", out var token))
        {
            Token = token;
            await LocalStore.SetItemAsync("SpotifyToken", token.FirstOrDefault());
            await GetUser();
            Navigation.NavigateTo("/creator");
        }
        var existingToken = await LocalStore.GetItemAsync<string>("SpotifyToken");
    }
    private async Task GetUser()
    {
        Http.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", Token);
        var result = await Http.GetStringAsync($"https://api.spotify.com/v1/me");
        User = JsonConvert.DeserializeObject<SpotifyUser>(result);
        await LocalStore.SetItemAsync("SpotifyUser", User);
    }
    public void Connect()
    {
        var clientId = Config["Client"];
        var redirectUrl = Config["Redirect"];
        Navigation.NavigateTo($"https://accounts.spotify.com/authorize?client_id={clientId}&redirect_uri={redirectUrl}&scope=playlist-modify-public%20playlist-modify-private%20&response_type=token&state=123");
    }
}
