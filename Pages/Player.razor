@page "/player"
@inject Blazored.LocalStorage.ILocalStorageService LocalStore
@inject HttpClient Http
@inject SpotifyService Spotify
@inject IJSRuntime JSRuntime
@inject NavigationManager Navigation
@inject IToastService Toast

<main role="main" class="container">
    <div class="row">
        <div class="col">
            <h2>@PlayerHeader</h2>
        </div>
    </div>
    <br />
    <div class="row">
        <div class="col">
            <img src="@ImageUrl" class="cover-art"/>
        </div>
    </div>
    <div class="row @NowPlayingClass">
        <div class="col">
            <h2>No playlist selected</h2>
        </div>
    </div>
    <br />
    <div class="row ">
        <div class="col">
            <h4 >@Track</h4>  
            <h6>@Artist</h6>
        </div>
    </div>
    <br />
    <div class="row">
        <div class="col">
            <div class="btn-group">
                <a href="#" @onclick:preventDefault @onclick="Back" class="btn btn-dark"><i class="oi oi-media-step-backward"></i></a>
                <a href="#" @onclick:preventDefault @onclick="TogglePlay" class="btn btn-dark"><i class="oi @PlayIcon"></i></a>
                <a href="#" @onclick:preventDefault @onclick="Forward" class="btn btn-dark"><i class="oi oi-media-step-forward"></i></a>
            </div>
        </div>
    </div>
</main>

@code {
    private SpotifyPlaylist Playlist { get; set; }
    private string ImageUrl { get; set; } = "/img/icon180.png";
    private string Track { get; set; } = "Nothing playing";
    private string Artist { get; set; }
    private bool IsPlaying { get; set; }
    private string PlayIcon => IsPlaying ? "oi-media-pause" : "oi-media-play";
    private string NowPlayingClass { get; set; } = "hide";
    private static Func<Task> Update;
    private static Func<Task> PlayAction;
    private static Func<Task> UnsupportedAction;
    private string PlayerHeader { get; set; }
    protected override async Task OnInitializedAsync()
    {
        var token = await LocalStore.GetItemAsync<string>("SpotifyToken");
        if (token != null)
        {
            Playlist = await LocalStore.GetItemAsync<SpotifyPlaylist>("SpotifyPlaylist");
            if (Playlist != null && !string.IsNullOrEmpty(Playlist.Id))
            {
                PlayerHeader = $"Playing list: {Playlist.Name}";
                var images = await Spotify.GetImages(Playlist.Id);
                if (images?.Any() ?? false)
                {
                    ImageUrl = images.OrderByDescending(_ => _.Height).FirstOrDefault()?.Url;
                }
            }
            Update = UpdatePlayer;
            PlayAction = PlayUri;
            UnsupportedAction = UnsupportedPlayer;
            await JSRuntime.InvokeVoidAsync("connectPlayer", token);
        }
        else
        {
            Toast.ShowError("Invalid token. Please reconnect to Spotify");
            Navigation.NavigateTo("/");
        }
    }

    private async Task Back()
    {
        await Spotify.UpdatePlayer(SpotifyPlayerTask.previous);
    }

    private async Task TogglePlay()
    {
        await Spotify.UpdatePlayer(IsPlaying ? SpotifyPlayerTask.pause : SpotifyPlayerTask.play);
    }

    private async Task Forward()
    {
        await Spotify.UpdatePlayer(SpotifyPlayerTask.next);
    }

    private async Task PlayUri()
    {
        if (Playlist != null)
        {
            await Spotify.Play(Playlist.Uri);
        }
        else
        {
            Toast.ShowWarning("No playlist selected.");
        }
    }

    private async Task UpdatePlayer()
    {
        var context = await LocalStore.GetItemAsync<SpotifyContext>(Constants.SpotifyContextKey);
        if (context == null)
        {
            Track = "Nothing playing";
            Artist = string.Empty;
            IsPlaying = false;
        }
        else
        {
            if (Playlist == null || !context.IsPlayingList(Playlist.Id))
            {
                Playlist = null;
                ImageUrl = Constants.DefaultImage;
                PlayerHeader = string.Empty;
                await LocalStore.RemoveItemAsync("SpotifyPlaylist");
            }
            ImageUrl = context.HasImage ? context.Image : Constants.DefaultImage;
            Artist = context.Artist;
            Track = context.Track;
            IsPlaying = !context.Paused ?? false;
        }

        StateHasChanged();
        await Task.Delay(1);
    }

    private async Task UnsupportedPlayer()
    {
        Toast.ShowError("Unsupported browser. Cannot play on Spotify.");
        StateHasChanged();
        await Task.Delay(1);
    }

    [JSInvokable]
    public static async Task Unsupported()
    {
        await UnsupportedAction.Invoke();
    }

    [JSInvokable]
    public static async Task UpdateUI()
    {
        await Update.Invoke();
    }
}